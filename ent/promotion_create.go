// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"storage-app/ent/promotion"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PromotionCreate is the builder for creating a Promotion entity.
type PromotionCreate struct {
	config
	mutation *PromotionMutation
	hooks    []Hook
}

// SetPid sets the "pid" field.
func (pc *PromotionCreate) SetPid(s string) *PromotionCreate {
	pc.mutation.SetPid(s)
	return pc
}

// SetPrice sets the "price" field.
func (pc *PromotionCreate) SetPrice(f float64) *PromotionCreate {
	pc.mutation.SetPrice(f)
	return pc
}

// SetExpirationDate sets the "expiration_date" field.
func (pc *PromotionCreate) SetExpirationDate(t time.Time) *PromotionCreate {
	pc.mutation.SetExpirationDate(t)
	return pc
}

// SetID sets the "id" field.
func (pc *PromotionCreate) SetID(i int) *PromotionCreate {
	pc.mutation.SetID(i)
	return pc
}

// Mutation returns the PromotionMutation object of the builder.
func (pc *PromotionCreate) Mutation() *PromotionMutation {
	return pc.mutation
}

// Save creates the Promotion in the database.
func (pc *PromotionCreate) Save(ctx context.Context) (*Promotion, error) {
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PromotionCreate) SaveX(ctx context.Context) *Promotion {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PromotionCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PromotionCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PromotionCreate) check() error {
	if _, ok := pc.mutation.Pid(); !ok {
		return &ValidationError{Name: "pid", err: errors.New(`ent: missing required field "Promotion.pid"`)}
	}
	if _, ok := pc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "Promotion.price"`)}
	}
	if _, ok := pc.mutation.ExpirationDate(); !ok {
		return &ValidationError{Name: "expiration_date", err: errors.New(`ent: missing required field "Promotion.expiration_date"`)}
	}
	return nil
}

func (pc *PromotionCreate) sqlSave(ctx context.Context) (*Promotion, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PromotionCreate) createSpec() (*Promotion, *sqlgraph.CreateSpec) {
	var (
		_node = &Promotion{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(promotion.Table, sqlgraph.NewFieldSpec(promotion.FieldID, field.TypeInt))
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.Pid(); ok {
		_spec.SetField(promotion.FieldPid, field.TypeString, value)
		_node.Pid = value
	}
	if value, ok := pc.mutation.Price(); ok {
		_spec.SetField(promotion.FieldPrice, field.TypeFloat64, value)
		_node.Price = value
	}
	if value, ok := pc.mutation.ExpirationDate(); ok {
		_spec.SetField(promotion.FieldExpirationDate, field.TypeTime, value)
		_node.ExpirationDate = value
	}
	return _node, _spec
}

// PromotionCreateBulk is the builder for creating many Promotion entities in bulk.
type PromotionCreateBulk struct {
	config
	builders []*PromotionCreate
}

// Save creates the Promotion entities in the database.
func (pcb *PromotionCreateBulk) Save(ctx context.Context) ([]*Promotion, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Promotion, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PromotionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PromotionCreateBulk) SaveX(ctx context.Context) []*Promotion {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PromotionCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PromotionCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
